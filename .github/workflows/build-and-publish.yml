# .github/workflows/build-and-publish.yml
#
# SPDX-License-Identifier: CC-BY-4.0 OR GPL-3.0-or-later
# This file is part of Network Pro

name: Build and Publish to Registries

on:
  release:
    types: [created]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment
permissions:
  contents: read
  packages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "build-and-publish"
  cancel-in-progress: true

jobs:
  check-codeql:
    name: Check CodeQL Analysis
    runs-on: ubuntu-24.04
    # Continue workflow even if this job fails due to inability to find and/or check CodeQL workflow
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: sudo apt-get install gh

      - name: Authenticate GitHub CLI
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: echo "$GH_PAT" | gh auth login --with-token

      - name: Check CodeQL Workflow
        run: |
          gh run list --workflow "CodeQL" --json conclusion --jq '.[0].conclusion' > codeql_status.txt
          CODEQL_STATUS=$(cat codeql_status.txt)
          if [[ "$CODEQL_STATUS" != "success" ]]; then
            echo "CodeQL Analysis did not succeed. Exiting..."
            exit 1
          fi
          rm codeql_status.txt

  build:
    needs: check-codeql
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install jq
        run: sudo apt-get install -y jq

      # Check for proper JSDoc annnotations
      - name: Run JSDoc lint check
        run: |
          set -e
          output=$(npm run lint:jsdoc || true)
          echo "$output"

          count=$(echo "$output" | wc -l)
          if [ "$count" -gt 0 ]; then
            echo "❌ JSDoc lint check failed with $count violations."
            exit 1
          fi

      - name: ✅ Pass
        if: success()
        run: echo "JSDoc lint passed successfully!"

      # Test to ensure the package is working
      - name: Build Node.js project
        run: npm run build

      # Remove build artifacts to avoid publishing them
      - name: Clean build directory
        run: rm -rf build/

      # Upload clean source code
      - name: Upload repository artifacts
        uses: actions/upload-artifact@v4
        with:
          name: repo-artifacts
          path: ./

  publish-npmjs:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Download repository artifacts
        uses: actions/download-artifact@v4
        with:
          name: repo-artifacts
          path: ./

      - name: Set up Node.js for npmjs
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          registry-url: https://registry.npmjs.org/
          cache: npm

      - name: Set up Git user
        run: |
          git config --global user.email "github@sl.neteng.cc"
          git config --global user.name "SunDevil311"

      - name: Verify version not already published
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Checking if $PACKAGE_NAME@$PACKAGE_VERSION is already published..."

          npm view $PACKAGE_NAME@$PACKAGE_VERSION > /dev/null && {
            echo "❌ Version $PACKAGE_VERSION already exists on npm. Exiting..."
            exit 1
          } || echo "✅ Version is new. Proceeding with publish."

      - name: Publish package to npmjs
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_NETPRO }}

  publish-gpr:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Download repository artifacts
        uses: actions/download-artifact@v4
        with:
          name: repo-artifacts
          path: ./

      - name: Set up Node.js for GPR
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          registry-url: https://npm.pkg.github.com/
          cache: npm

      - name: Set up Git user
        run: |
          git config --global user.email "github@sl.neteng.cc"
          git config --global user.name "SunDevil311"

      - name: Update package name for GPR
        run: |
          sed -i 's/"name": ".*"/"name": "@netwk-pro\/web"/' package.json

      - name: Verify version not already published
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Checking if $PACKAGE_NAME@$PACKAGE_VERSION is already published..."

          npm view $PACKAGE_NAME@$PACKAGE_VERSION > /dev/null && {
            echo "❌ Version $PACKAGE_VERSION already exists on npm. Exiting..."
            exit 1
          } || echo "✅ Version is new. Proceeding with publish."

      - name: Publish package to GPR
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_PAT }}
